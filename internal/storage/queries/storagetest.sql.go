// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: storagetest.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const insertAvailability = `-- name: InsertAvailability :one
INSERT INTO availabilities (product_id, local_date, vacancies, deleted_at) 
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, deleted_at, product_id, local_date, vacancies
`

type InsertAvailabilityParams struct {
	ProductID int32
	LocalDate time.Time
	Vacancies int32
	DeletedAt sql.NullTime
}

func (q *Queries) InsertAvailability(ctx context.Context, arg InsertAvailabilityParams) (Availability, error) {
	row := q.db.QueryRowContext(ctx, insertAvailability,
		arg.ProductID,
		arg.LocalDate,
		arg.Vacancies,
		arg.DeletedAt,
	)
	var i Availability
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ProductID,
		&i.LocalDate,
		&i.Vacancies,
	)
	return i, err
}

const insertPrice = `-- name: InsertPrice :one
INSERT INTO prices (price, currency, product_id, deleted_at)
VALUES ($1, $2, $3, $4) 
RETURNING id, created_at, updated_at, deleted_at, price, currency, product_id
`

type InsertPriceParams struct {
	Price     int32
	Currency  string
	ProductID int32
	DeletedAt sql.NullTime
}

// used in tests
func (q *Queries) InsertPrice(ctx context.Context, arg InsertPriceParams) (Price, error) {
	row := q.db.QueryRowContext(ctx, insertPrice,
		arg.Price,
		arg.Currency,
		arg.ProductID,
		arg.DeletedAt,
	)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Price,
		&i.Currency,
		&i.ProductID,
	)
	return i, err
}

const insertProduct = `-- name: InsertProduct :one
INSERT INTO products (name, capacity, deleted_at) 
VALUES ($1, $2, $3) 
RETURNING id, created_at, updated_at, deleted_at, name, capacity
`

type InsertProductParams struct {
	Name      string
	Capacity  int32
	DeletedAt sql.NullTime
}

// used in tests
func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, insertProduct, arg.Name, arg.Capacity, arg.DeletedAt)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Capacity,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (email, api_key)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, deleted_at, email, api_key
`

type InsertUserParams struct {
	Email  string
	ApiKey sql.NullString
}

// used in tests
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Email, arg.ApiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.ApiKey,
	)
	return i, err
}
