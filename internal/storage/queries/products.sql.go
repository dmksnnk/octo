// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package queries

import (
	"context"
)

const product = `-- name: Product :one
SELECT id, created_at, updated_at, deleted_at, name, capacity FROM products
WHERE products.id = $1
AND products.deleted_at IS NULL
`

func (q *Queries) Product(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, product, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Capacity,
	)
	return i, err
}

const productWithPrice = `-- name: ProductWithPrice :one
SELECT products.id, products.created_at, products.updated_at, products.deleted_at, products.name, products.capacity, prices.id, prices.created_at, prices.updated_at, prices.deleted_at, prices.price, prices.currency, prices.product_id
FROM products
JOIN prices ON products.id = prices.product_id
WHERE products.id = $1
AND products.deleted_at IS NULL
AND prices.deleted_at IS NULL
`

type ProductWithPriceRow struct {
	Product Product
	Price   Price
}

func (q *Queries) ProductWithPrice(ctx context.Context, id int32) (ProductWithPriceRow, error) {
	row := q.db.QueryRowContext(ctx, productWithPrice, id)
	var i ProductWithPriceRow
	err := row.Scan(
		&i.Product.ID,
		&i.Product.CreatedAt,
		&i.Product.UpdatedAt,
		&i.Product.DeletedAt,
		&i.Product.Name,
		&i.Product.Capacity,
		&i.Price.ID,
		&i.Price.CreatedAt,
		&i.Price.UpdatedAt,
		&i.Price.DeletedAt,
		&i.Price.Price,
		&i.Price.Currency,
		&i.Price.ProductID,
	)
	return i, err
}

const products = `-- name: Products :many
SELECT id, created_at, updated_at, deleted_at, name, capacity FROM products
WHERE products.deleted_at IS NULL
`

func (q *Queries) Products(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, products)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Capacity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const productsWithPrices = `-- name: ProductsWithPrices :many
SELECT products.id, products.created_at, products.updated_at, products.deleted_at, products.name, products.capacity, prices.id, prices.created_at, prices.updated_at, prices.deleted_at, prices.price, prices.currency, prices.product_id
FROM products
JOIN prices ON products.id = prices.product_id
WHERE products.deleted_at IS NULL 
AND prices.deleted_at IS NULL
`

type ProductsWithPricesRow struct {
	Product Product
	Price   Price
}

func (q *Queries) ProductsWithPrices(ctx context.Context) ([]ProductsWithPricesRow, error) {
	rows, err := q.db.QueryContext(ctx, productsWithPrices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductsWithPricesRow
	for rows.Next() {
		var i ProductsWithPricesRow
		if err := rows.Scan(
			&i.Product.ID,
			&i.Product.CreatedAt,
			&i.Product.UpdatedAt,
			&i.Product.DeletedAt,
			&i.Product.Name,
			&i.Product.Capacity,
			&i.Price.ID,
			&i.Price.CreatedAt,
			&i.Price.UpdatedAt,
			&i.Price.DeletedAt,
			&i.Price.Price,
			&i.Price.Currency,
			&i.Price.ProductID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
